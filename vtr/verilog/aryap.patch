diff --git a/vtr_flow/benchmarks/verilog/LU32PEEng.v b/vtr_flow/benchmarks/verilog/LU32PEEng.v
index ddda843d6..63b8ea458 100755
--- a/vtr_flow/benchmarks/verilog/LU32PEEng.v
+++ b/vtr_flow/benchmarks/verilog/LU32PEEng.v
@@ -2604,16 +2604,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 1024'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2644,16 +2645,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 1024'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2684,16 +2686,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 1024'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2724,16 +2727,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 1024'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2763,16 +2767,17 @@ module top_ram (
 	assign q = sub_wire0 | dummy;
 	wire[32-1:0] dummy;
 	assign dummy = junk_output & 32'b0;
- dual_port_ram inst2(
- .clk (clk),
- .we1(wren),
- .we2(1'b0),
- .data1(data),
- .data2(data),
- .out1(junk_output),
- .out2(sub_wire0),
- .addr1(wraddress),
- .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+// dual_port_ram inst2(
+// .clk (clk),
+// .we1(wren),
+// .we2(1'b0),
+// .data1(data),
+// .data2(data),
+// .out1(junk_output),
+// .out2(sub_wire0),
+// .addr1(wraddress),
+// .addr2(rdaddress));
 
 endmodule
 
@@ -3290,17 +3295,18 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 64 ))
 		status_cnt <= status_cnt + 1'b1;
 end 
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -3399,17 +3405,18 @@ begin // : STATUS_COUNTER
 		status_cnt <= status_cnt + 1'b1;
 end 
 assign usedw = status_cnt[`wFIFOSIZEWIDTH-1:0];
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -3473,17 +3480,18 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000))
 		status_cnt <= status_cnt + 1;
 end
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -3543,16 +3551,17 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 16 ))
 		status_cnt <= status_cnt + 1'b1;
 end
-	dual_port_ram ram_addr(
-	.we1      (wrreq)      , // write enable
-	.we2      (rdreq)       , // Read enable
-	.addr1 (wr_pointer) , // address_0 input
-	.addr2 (rd_pointer) , // address_q input
-	.data1    (data)    , // data_0 bi-directional
-	.data2    (junk_input),   // data_1 bi-directional
-	.clk(clk),
-	.out1	(data_ram),
-	.out2	(junk_output));
+// aryap: removed for benchmark graph generation
+//	dual_port_ram ram_addr(
+//	.we1      (wrreq)      , // write enable
+//	.we2      (rdreq)       , // Read enable
+//	.addr1 (wr_pointer) , // address_0 input
+//	.addr2 (rd_pointer) , // address_q input
+//	.data1    (data)    , // data_0 bi-directional
+//	.data2    (junk_input),   // data_1 bi-directional
+//	.clk(clk),
+//	.out1	(data_ram),
+//	.out2	(junk_output));
 
 
 endmodule
diff --git a/vtr_flow/benchmarks/verilog/LU64PEEng.v b/vtr_flow/benchmarks/verilog/LU64PEEng.v
index c5d441b7c..19097c045 100755
--- a/vtr_flow/benchmarks/verilog/LU64PEEng.v
+++ b/vtr_flow/benchmarks/verilog/LU64PEEng.v
@@ -3084,16 +3084,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 2048'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -3124,16 +3125,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 2048'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -3164,16 +3166,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 2048'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -3204,16 +3207,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 2048'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -3243,16 +3247,17 @@ module top_ram (
 	assign q = sub_wire0 | dummy;
 	wire[32-1:0] dummy;
 	assign dummy = junk_output & 32'b0;
- dual_port_ram inst2(
- .clk (clk),
- .we1(wren),
- .we2(1'b0),
- .data1(data),
- .data2(data),
- .out1(junk_output),
- .out2(sub_wire0),
- .addr1(wraddress),
- .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+// dual_port_ram inst2(
+// .clk (clk),
+// .we1(wren),
+// .we2(1'b0),
+// .data1(data),
+// .data2(data),
+// .out1(junk_output),
+// .out2(sub_wire0),
+// .addr1(wraddress),
+// .addr2(rdaddress));
 
 endmodule
 
@@ -3834,17 +3839,18 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 64 ))
 		status_cnt <= status_cnt + 1'b1;
 end 
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -3975,17 +3981,18 @@ begin // : STATUS_COUNTER
 		status_cnt <= status_cnt + 1'b1;
 end 
 assign usedw = status_cnt[`wFIFOSIZEWIDTH-1:0];
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -4049,17 +4056,18 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000))
 		status_cnt <= status_cnt + 1;
 end
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -4119,16 +4127,17 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 16 ))
 		status_cnt <= status_cnt + 1'b1;
 end
-	dual_port_ram ram_addr(
-	.we1      (wrreq)      , // write enable
-	.we2      (rdreq)       , // Read enable
-	.addr1 (wr_pointer) , // address_0 input
-	.addr2 (rd_pointer) , // address_q input
-	.data1    (data)    , // data_0 bi-directional
-	.data2    (junk_input),   // data_1 bi-directional
-	.clk(clk),
-	.out1	(data_ram),
-	.out2	(junk_output));
+// aryap: removed for benchmark graph generation
+//	dual_port_ram ram_addr(
+//	.we1      (wrreq)      , // write enable
+//	.we2      (rdreq)       , // Read enable
+//	.addr1 (wr_pointer) , // address_0 input
+//	.addr2 (rd_pointer) , // address_q input
+//	.data1    (data)    , // data_0 bi-directional
+//	.data2    (junk_input),   // data_1 bi-directional
+//	.clk(clk),
+//	.out1	(data_ram),
+//	.out2	(junk_output));
 
 
 endmodule
diff --git a/vtr_flow/benchmarks/verilog/LU8PEEng.v b/vtr_flow/benchmarks/verilog/LU8PEEng.v
index be2fb290c..a7cef2dea 100755
--- a/vtr_flow/benchmarks/verilog/LU8PEEng.v
+++ b/vtr_flow/benchmarks/verilog/LU8PEEng.v
@@ -2244,16 +2244,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 256'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2284,16 +2285,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 256'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2324,16 +2326,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 256'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2364,16 +2367,17 @@ wire j;
 assign j = |byteena_a;
  wire [`RAMWIDTH-1:0]dummy;
  assign dummy = value_out & 256'b0;
-dual_port_ram inst1( 
-.clk (clk),
-.we1(wren),
-.we2(1'b0),
-.data1(data),
-.data2(uselessdata),
-.out1(value_out),
-.out2(subwire),
-.addr1(wraddress),
-.addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram inst1( 
+//.clk (clk),
+//.we1(wren),
+//.we2(1'b0),
+//.data1(data),
+//.data2(uselessdata),
+//.out1(value_out),
+//.out2(subwire),
+//.addr1(wraddress),
+//.addr2(rdaddress));
 
 
 endmodule
@@ -2403,16 +2407,17 @@ module top_ram (
 	assign q = sub_wire0 | dummy;
 	wire[32-1:0] dummy;
 	assign dummy = junk_output & 32'b0;
- dual_port_ram inst2(
- .clk (clk),
- .we1(wren),
- .we2(1'b0),
- .data1(data),
- .data2(data),
- .out1(junk_output),
- .out2(sub_wire0),
- .addr1(wraddress),
- .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+// dual_port_ram inst2(
+// .clk (clk),
+// .we1(wren),
+// .we2(1'b0),
+// .data1(data),
+// .data2(data),
+// .out1(junk_output),
+// .out2(sub_wire0),
+// .addr1(wraddress),
+// .addr2(rdaddress));
 
 endmodule
 
@@ -2882,17 +2887,18 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 64 ))
 		status_cnt <= status_cnt + 1'b1;
 end 
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -2967,17 +2973,18 @@ begin // : STATUS_COUNTER
 		status_cnt <= status_cnt + 1'b1;
 end 
 assign usedw = status_cnt[`wFIFOSIZEWIDTH-1:0];
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -3041,17 +3048,18 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000))
 		status_cnt <= status_cnt + 1;
 end
-  dual_port_ram ram_addr(
-.we1      (wrreq)      , // write enable
- .we2      (rdreq)       , // Read enable
-.addr1 (wr_pointer) , // address_0 input 
-.addr2 (rd_pointer) , // address_q input  
-.data1    (data)    , // data_0 bi-directional
-.data2    (junk_input),   // data_1 bi-directional
-.clk(clk),
-.out1	(data_ram),
-.out2	(junk_output)
- ); 
+// aryap: removed for benchmark graph generation
+//  dual_port_ram ram_addr(
+//.we1      (wrreq)      , // write enable
+// .we2      (rdreq)       , // Read enable
+//.addr1 (wr_pointer) , // address_0 input 
+//.addr2 (rd_pointer) , // address_q input  
+//.data1    (data)    , // data_0 bi-directional
+//.data2    (junk_input),   // data_1 bi-directional
+//.clk(clk),
+//.out1	(data_ram),
+//.out2	(junk_output)
+// ); 
 
 
 endmodule
@@ -3111,16 +3119,17 @@ begin // : STATUS_COUNTER
 	else if ((wrreq) && (!rdreq) && (status_cnt != 16 ))
 		status_cnt <= status_cnt + 1'b1;
 end
-	dual_port_ram ram_addr(
-	.we1      (wrreq)      , // write enable
-	.we2      (rdreq)       , // Read enable
-	.addr1 (wr_pointer) , // address_0 input
-	.addr2 (rd_pointer) , // address_q input
-	.data1    (data)    , // data_0 bi-directional
-	.data2    (junk_input),   // data_1 bi-directional
-	.clk(clk),
-	.out1	(data_ram),
-	.out2	(junk_output));
+// aryap: removed for benchmark graph generation
+//	dual_port_ram ram_addr(
+//	.we1      (wrreq)      , // write enable
+//	.we2      (rdreq)       , // Read enable
+//	.addr1 (wr_pointer) , // address_0 input
+//	.addr2 (rd_pointer) , // address_q input
+//	.data1    (data)    , // data_0 bi-directional
+//	.data2    (junk_input),   // data_1 bi-directional
+//	.clk(clk),
+//	.out1	(data_ram),
+//	.out2	(junk_output));
 
 
 endmodule
diff --git a/vtr_flow/benchmarks/verilog/arm_core.v b/vtr_flow/benchmarks/verilog/arm_core.v
index c290fc893..5b7a1c1ac 100644
--- a/vtr_flow/benchmarks/verilog/arm_core.v
+++ b/vtr_flow/benchmarks/verilog/arm_core.v
@@ -5239,7 +5239,7 @@ assign pc_wen       = (i_pc_wen || !execute) && !i_conflict;
  
 // only update register bank if current instruction executes
 //assign reg_bank_wen = {{15{execute}} & i_reg_bank_wen};
- assign reg_bank_wen = execute ==1'd1? {15'b111111111111111 & i_reg_bank_wen}   :
+ assign reg_bank_wen = execute ==1'd1 ? {15'b111111111111111 & i_reg_bank_wen}   :
 					{15'b0 & i_reg_bank_wen};
  
 // ========================================================
diff --git a/vtr_flow/benchmarks/verilog/boundtop.v b/vtr_flow/benchmarks/verilog/boundtop.v
index a749b99d0..77f29b370 100755
--- a/vtr_flow/benchmarks/verilog/boundtop.v
+++ b/vtr_flow/benchmarks/verilog/boundtop.v
@@ -1644,14 +1644,14 @@ reg     temp_datavalid;
 
 
 
-
-single_port_ram new_ram(
-  .clk (clk),
-  .we(we),
-  .data(datain),
-  .out(dataout),
-  .addr(addr)
-  );
+// aryap: removed for benchmark graph generation
+//single_port_ram new_ram(
+//  .clk (clk),
+//  .we(we),
+//  .data(datain),
+//  .out(dataout),
+//  .addr(addr)
+//  );
   
   
  endmodule
diff --git a/vtr_flow/benchmarks/verilog/ch_intrinsics.v b/vtr_flow/benchmarks/verilog/ch_intrinsics.v
index fc35acad6..56c3dcb2b 100755
--- a/vtr_flow/benchmarks/verilog/ch_intrinsics.v
+++ b/vtr_flow/benchmarks/verilog/ch_intrinsics.v
@@ -28,13 +28,13 @@ reg str_write_enable;
 reg [7:0] str_in;
 wire [7:0] str_out;
 
-single_port_ram _str (
-	.clk( clk ),
-	.addr( str_address ),
-	.we( str_write_enable ),
-	.data( str_in ),
-	.out( str_out )
-);
+//single_port_ram _str (
+//	.clk( clk ),
+//	.addr( str_address ),
+//	.we( str_write_enable ),
+//	.data( str_in ),
+//	.out( str_out )
+//);
 
 
 wire  tag;
diff --git a/vtr_flow/benchmarks/verilog/mcml.v b/vtr_flow/benchmarks/verilog/mcml.v
index 1a9b6bb4e..cceda6b3c 100755
--- a/vtr_flow/benchmarks/verilog/mcml.v
+++ b/vtr_flow/benchmarks/verilog/mcml.v
@@ -1751,16 +1751,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 32'b00000000000000000000000000000000;
 assign dont_care_out = 32'b00000000000000000000000000000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -1786,16 +1787,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 32'b00000000000000000000000000000000;
 assign dont_care_out = 32'b00000000000000000000000000000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -1821,16 +1823,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 32'b00000000000000000000000000000000;
 assign dont_care_out = 32'b00000000000000000000000000000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -1856,16 +1859,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 32'b00000000000000000000000000000000;
 assign dont_care_out = 32'b00000000000000000000000000000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -1890,16 +1894,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 36'b000000000000000000000000000000000000;
 assign dont_care_out = 36'b000000000000000000000000000000000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -1924,16 +1929,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 18'b000000000000000000;
 assign dont_care_out = 18'b000000000000000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -1958,16 +1964,17 @@ assign const_zero = 1'b0;
 assign const_zero_data = 8'b00000000;
 assign dont_care_out = 8'b00000000;
 	
-dual_port_ram dpram1(	
-  .clk (clk),
-  .we1(wren),
-  .we2(const_zero),
-  .data1(data),
-  .data2(const_zero_data),
-  .out1(dont_care_out),
-  .out2 (q),
-  .addr1(wraddress),
-  .addr2(rdaddress));
+// aryap: removed for benchmark graph generation
+//dual_port_ram dpram1(	
+//  .clk (clk),
+//  .we1(wren),
+//  .we2(const_zero),
+//  .data1(data),
+//  .data2(const_zero_data),
+//  .out1(dont_care_out),
+//  .out2 (q),
+//  .addr1(wraddress),
+//  .addr2(rdaddress));
   
   
   endmodule
@@ -10426,7 +10433,8 @@ reg [`BIT_WIDTH - 1:0] log_x;
 //Log_mantissa u1(c_shifted_x, clock, mantissa);
 wire [31:0]blank;
 assign blank = 32'b000000000000000000000000000000;
-single_port_ram sram_replace0 (.clk (clock), .addr (c_shifted_x), .data (blank), .we (1'b0), .out (mantissa));
+// aryap: removed for benchmark graph generation
+//single_port_ram sram_replace0 (.clk (clock), .addr (c_shifted_x), .data (blank), .we (1'b0), .out (mantissa));
 
 // priority encoder
 //integer i;
@@ -18279,8 +18287,10 @@ output	[31:0]			cosp;
 //Instantiate a single port ram for odin
 wire [31:0]blank;
 assign blank = 32'b000000000000000000000000000000;
-single_port_ram sinp_replace(.clk (clock), .addr (pindex), .data (blank), .we (1'b0), .out (sinp));
-single_port_ram cosp_replace(.clk (clock), .addr (pindex), .data (blank), .we (1'b0), .out (cosp));
+
+// aryap: removed for benchmark graph generation
+//single_port_ram sinp_replace(.clk (clock), .addr (pindex), .data (blank), .we (1'b0), .out (sinp));
+//single_port_ram cosp_replace(.clk (clock), .addr (pindex), .data (blank), .we (1'b0), .out (cosp));
 
 			
 endmodule
diff --git a/vtr_flow/benchmarks/verilog/mkDelayWorker32B.v b/vtr_flow/benchmarks/verilog/mkDelayWorker32B.v
index d20b58708..6396272c6 100755
--- a/vtr_flow/benchmarks/verilog/mkDelayWorker32B.v
+++ b/vtr_flow/benchmarks/verilog/mkDelayWorker32B.v
@@ -1503,17 +1503,17 @@ module mkDelayWorker32B(wciS0_Clk,
 wire [255:0] dp_out_not_used1;
 wire [255:0] dp_out_not_used2;
 
-  dual_port_ram dpram1 (
-						.clk(wciS0_Clk),
-					    .addr1(mesgRF_memory__ADDRA),
-					    .addr2(mesgRF_memory__ADDRB),
-					    .data1(mesgRF_memory__DIA),
-					    .data2(mesgRF_memory__DIB),
-					    .we1(mesgRF_memory__WEA),
-					    .we2(mesgRF_memory__WEB),
-					    .out1(dp_out_not_used1),
-					    .out2(mesgRF_memory__DOB)
-						);
+  //dual_port_ram dpram1 (
+  //      					.clk(wciS0_Clk),
+  //      				    .addr1(mesgRF_memory__ADDRA),
+  //      				    .addr2(mesgRF_memory__ADDRB),
+  //      				    .data1(mesgRF_memory__DIA),
+  //      				    .data2(mesgRF_memory__DIB),
+  //      				    .we1(mesgRF_memory__WEA),
+  //      				    .we2(mesgRF_memory__WEB),
+  //      				    .out1(dp_out_not_used1),
+  //      				    .out2(mesgRF_memory__DOB)
+  //      					);
 
   // submodule mesgWF_memory
 //#(.PIPELINED(1'b0),
@@ -1521,17 +1521,17 @@ wire [255:0] dp_out_not_used2;
 //	  .DATA_WIDTH(32'b1056),
 //	  .MEMSIZE(11'b1024)) mesgWF_memory(
 	  
- dual_port_ram dpram2   (
-						.clk(wciS0_Clk),
-					    .addr1(mesgWF_memory__ADDRA),
-					    .addr2(mesgWF_memory__ADDRB),
-					    .data1(mesgWF_memory__DIA),
-					    .data2(mesgWF_memory__DIB),
-					    .we1(mesgWF_memory__WEA),
-					    .we2(mesgWF_memory__WEB),
-					    .out1(dp_out_not_used2),
-					    .out2(mesgWF_memory__DOB)
-						);
+ //dual_port_ram dpram2   (
+ //       					.clk(wciS0_Clk),
+ //       				    .addr1(mesgWF_memory__ADDRA),
+ //       				    .addr2(mesgWF_memory__ADDRB),
+ //       				    .data1(mesgWF_memory__DIA),
+ //       				    .data2(mesgWF_memory__DIB),
+ //       				    .we1(mesgWF_memory__WEA),
+ //       				    .we2(mesgWF_memory__WEB),
+ //       				    .out1(dp_out_not_used2),
+ //       				    .out2(mesgWF_memory__DOB)
+ //       					);
 
   // submodule metaRF
   arSRLFIFO_a 	ars1	(
@@ -4083,11 +4083,11 @@ input	[`dwa-1:0]	din;
 input			we;
 output	[`dwa-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4120,17 +4120,18 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 32'b00000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+ // aryap: removed for benchmark
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4468,11 +4469,11 @@ input	[`dwa-1:0]	din;
 input			we;
 output	[`dwa-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4505,17 +4506,18 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 32'b00000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+ // aryap: removed for benchmark
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4857,11 +4859,11 @@ input	[`dwc-1:0]	din;
 input			we;
 output	[`dwc-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4894,17 +4896,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -5246,11 +5248,11 @@ input	[`dwd-1:0]	din;
 input			we;
 output	[`dwd-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -5283,17 +5285,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -5636,11 +5638,11 @@ input	[`dwc-1:0]	din;
 input			we;
 output	[`dwc-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -5673,17 +5675,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 60'b000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -6023,11 +6025,11 @@ input	[`dwf-1:0]	din;
 input			we;
 output	[`dwf-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -6060,17 +6062,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 313'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -6413,11 +6415,11 @@ input	[`dwx-1:0]	din;
 input			we;
 output	[`dwx-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -6450,17 +6452,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 131'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -6579,4 +6581,4 @@ always @(posedge clk )
 	else
 	if(re & (cnt <= (`max_size-`n+1)) & !we)	full_n_r <=  1'b0;
 
-endmodule
\ No newline at end of file
+endmodule
diff --git a/vtr_flow/benchmarks/verilog/mkPktMerge.v b/vtr_flow/benchmarks/verilog/mkPktMerge.v
index 505c46b30..bd44b6594 100755
--- a/vtr_flow/benchmarks/verilog/mkPktMerge.v
+++ b/vtr_flow/benchmarks/verilog/mkPktMerge.v
@@ -516,11 +516,11 @@ input	[`dw-1:0]	din;
 input			we;
 output	[`dw-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire 			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -553,17 +553,18 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 0;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		doutz		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+ // aryap: removed for benchmarks
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		doutz		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
  wire [`dw-1:0] doutz;
 assign dout = (1'b1) ? doutz: junk_out;
@@ -913,11 +914,11 @@ input	[`dw-1:0]	din;
 input			we;
 output	[`dw-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -950,17 +951,18 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 0;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		doutz		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+ // aryap: removed for benchmarks
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		doutz		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 wire [`dw-1:0] doutz;
 assign dout = (1'b1) ? doutz: junk_out;
@@ -1311,11 +1313,12 @@ input	[`dw-1:0]	din;
 input			we;
 output	[`dw-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full;
+output                  full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -1348,17 +1351,18 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 0;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		doutz		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+ // aryap: removed for benchmarks
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		doutz		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
  wire [`dw-1:0] doutz;
 assign dout = (1'b1) ? doutz: junk_out;
diff --git a/vtr_flow/benchmarks/verilog/mkSMAdapter4B.v b/vtr_flow/benchmarks/verilog/mkSMAdapter4B.v
index bf033bc57..e472a47c9 100755
--- a/vtr_flow/benchmarks/verilog/mkSMAdapter4B.v
+++ b/vtr_flow/benchmarks/verilog/mkSMAdapter4B.v
@@ -3409,11 +3409,11 @@ input	[`dwa-1:0]	din;
 input			we;
 output	[`dwa-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -3446,17 +3446,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 60'b000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -3798,11 +3798,11 @@ input	[`dwb-1:0]	din;
 input			we;
 output	[`dwb-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -3835,17 +3835,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 34'b0000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4189,11 +4189,11 @@ input	[`dwc-1:0]	din;
 input			we;
 output	[`dwc-1:0]	dout;
 input			re;
-output			full, full_r;
-output			empty, empty_r;
-output			full_n, full_n_r;
-output			empty_n, empty_n_r;
-output	[1:0]		level;
+wire			full; output full_r;
+wire			empty; output empty_r;
+wire			full_n; output full_n_r;
+wire			empty_n; output empty_n_r;
+wire	[1:0]		level;
  
 ////////////////////////////////////////////////////////////////////
 //
@@ -4226,17 +4226,17 @@ reg			full_n_r, empty_n_r;
  // manually assign
  assign junk_in = 61'b0000000000000000000000000000000000000000000000000000000000000;
  
-dual_port_ram   ram1(
-	.clk(		clk		),
-	.addr1(		rp		),
-	.addr2(		wp		),
-	.we1(		we		),
-	.we2(		always_zero		),
-	.out1(		dout		),
-	.out2(		junk_out		),
-	.data1(		din		),
-	.data2 (	junk_in)
-	);
+//dual_port_ram   ram1(
+//	.clk(		clk		),
+//	.addr1(		rp		),
+//	.addr2(		wp		),
+//	.we1(		we		),
+//	.we2(		always_zero		),
+//	.out1(		dout		),
+//	.out2(		junk_out		),
+//	.data1(		din		),
+//	.data2 (	junk_in)
+//	);
  
 ////////////////////////////////////////////////////////////////////
 //
diff --git a/vtr_flow/benchmarks/verilog/or1200.v b/vtr_flow/benchmarks/verilog/or1200.v
index e6f75b38e..49772af1f 100755
--- a/vtr_flow/benchmarks/verilog/or1200.v
+++ b/vtr_flow/benchmarks/verilog/or1200.v
@@ -3099,17 +3099,18 @@ assign const_zero_data = 32'b00000000000000000000000000000000;
 wire [31:0] dont_care_out;
 wire [31:0] dont_care_out2;
 
-dual_port_ram rf_a(	
-
-  .clk (clk),
-  .we1(const_zero),
-  .we2(rf_we),
-  .data1(const_zero_data),
-  .data2(rf_dataw),
-  .out1(from_rfa),
-  .out2 (dont_care_out),
-  .addr1(rf_addra),
-  .addr2(rf_addrw));
+// aryap: removed for benchmark graph generation
+//dual_port_ram rf_a(	
+//
+//  .clk (clk),
+//  .we1(const_zero),
+//  .we2(rf_we),
+//  .data1(const_zero_data),
+//  .data2(rf_dataw),
+//  .out1(from_rfa),
+//  .out2 (dont_care_out),
+//  .addr1(rf_addra),
+//  .addr2(rf_addrw));
 //
 // Instantiation of register file two-port RAM A
 //
@@ -3140,16 +3141,17 @@ or1200_tpram_32x32 rf_a(
 // Instantiation of register file two-port RAM B
 //
 
-dual_port_ram rf_b(	
-  .clk (clk),
-  .we1(const_zero),
-  .we2(rf_we),
-  .data1(const_zero_data),
-  .data2(rf_dataw),
-  .out1(from_rfb),
-  .out2 (dont_care_out2),
-  .addr1(addrb),
-  .addr2(rf_addrw));
+// aryap: removed for benchmark graph generation
+//dual_port_ram rf_b(	
+//  .clk (clk),
+//  .we1(const_zero),
+//  .we2(rf_we),
+//  .data1(const_zero_data),
+//  .data2(rf_dataw),
+//  .out1(from_rfb),
+//  .out2 (dont_care_out2),
+//  .addr1(addrb),
+//  .addr2(rf_addrw));
 /*
 or1200_tpram_32x32 rf_b(
 	// Port A
diff --git a/vtr_flow/benchmarks/verilog/raygentop.v b/vtr_flow/benchmarks/verilog/raygentop.v
index 2aaeec7a6..fa1b0b834 100755
--- a/vtr_flow/benchmarks/verilog/raygentop.v
+++ b/vtr_flow/benchmarks/verilog/raygentop.v
@@ -566,13 +566,14 @@ module rgconfigmemory (CfgAddr, CfgData, CfgData_Ready, want_CfgData, origx, ori
 	 end
 //changed to odin 2 ram specifications
 
-single_port_ram new_ram(
-  .clk (clk),
-  .we(we),
-  .data(datain),
-  .out(dataout),
-  .addr(addr)
-  );
+// aryap: removed for benchmark graph generation
+//single_port_ram new_ram(
+//  .clk (clk),
+//  .we(we),
+//  .data(datain),
+//  .out(dataout),
+//  .addr(addr)
+//  );
   
   
  endmodule
diff --git a/vtr_flow/benchmarks/verilog/spree.v b/vtr_flow/benchmarks/verilog/spree.v
index 4497cd7aa..b9cd4d89e 100755
--- a/vtr_flow/benchmarks/verilog/spree.v
+++ b/vtr_flow/benchmarks/verilog/spree.v
@@ -1717,25 +1717,27 @@ assign a_readdataout = a_readdataout_temp;
 
 wire wren1;
 assign wren1 = (c_we & (|c_reg));
-single_port_ram regfile1_replace (
-	.clk (clk),
-	.we(wren1),
-	.data(c_writedatain),
-	.out(a_readdataout_temp),
-	.addr(c_reg[4:0])
-);
+// aryap: removed for benchmark graph generation
+//single_port_ram regfile1_replace (
+//	.clk (clk),
+//	.we(wren1),
+//	.data(c_writedatain),
+//	.out(a_readdataout_temp),
+//	.addr(c_reg[4:0])
+//);
 
 //Reg file duplicated to avoid contention 
 //between 2 read and 1 write
 //MORE MEMORY
 
-single_port_ram regfile2_replace(
-	.clk (clk),
-	.we(wren1),
-	.data(c_writedatain),
-	.out(b_readdataout_temp),
-	.addr(c_reg[4:0])
-);		
+// aryap: removed for benchmark graph generation
+//single_port_ram regfile2_replace(
+//	.clk (clk),
+//	.we(wren1),
+//	.data(c_writedatain),
+//	.out(b_readdataout_temp),
+//	.addr(c_reg[4:0])
+//);		
 
 //Odin II does not recognize that address 
 //registers are being used to read and 
@@ -1976,17 +1978,18 @@ assign next_pc_wire = next_pc [9:0];
 
 wire [31:0]dummyout2;
 
-dual_port_ram imem_replace(
-	.clk (clk),
-	.we1(wren1),
-	.we2(boot_iwe),
-	.data1(load_data),
-	.data2(boot_idata),
-	.out1(instr),
-	.out2(dummyout2),
-	.addr1(next_pc_wire),
-	.addr2(boot_iaddr[9:0])
-);
+// aryap: removed for benchmark graph generation
+//dual_port_ram imem_replace(
+//	.clk (clk),
+//	.we1(wren1),
+//	.we2(boot_iwe),
+//	.data1(load_data),
+//	.data2(boot_idata),
+//	.out1(instr),
+//	.out2(dummyout2),
+//	.addr1(next_pc_wire),
+//	.addr2(boot_iaddr[9:0])
+//);
 
 wire [31:0] dummyin1;
 assign dummyin1 = 32'b00000000000000000000000000000000;
@@ -2146,13 +2149,14 @@ wire [9:0] memaddr_wrd;
 
 
 assign memaddr_wrd = d_address[`DM_ADDRESSWIDTH:2];
-single_port_ram dmem_replace(
-	.clk (clk),
-	.we(will_be_wren1),
-	.data(d_writedatamem),
-	.out(d_readdatain),
-	.addr(memaddr_wrd)
-);
+// aryap: removed for benchmark graph generation
+//single_port_ram dmem_replace(
+//	.clk (clk),
+//	.we(will_be_wren1),
+//	.data(d_writedatamem),
+//	.out(d_readdatain),
+//	.addr(memaddr_wrd)
+//);
 // 1 cycle stall state machine
 
 wire en_and_not_d_write;
